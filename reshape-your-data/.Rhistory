summarise(
mean(amt)
, sd(amt)
, `sem(amt)` = sd(amt) / sqrt(length(amt))
)
library(tidyverse)
revenue <- data.frame(
client = c('A', 'B', 'C')
, fy17 = c(100, 400, 250)
, fy18 = c(200, 0, 250)
, fy19 = c(300, 500, 250)
)
print(revenue)
revenue %>%
# Calculate column means
select(fy17:fy19) %>%
colMeans() %>%
# Clean up the output
data.frame() %>%
rename(`mean(amt)` = names(.)[1])
revenue %>%
# Replace 0 with NA
na_if(0) %>%
# Calculate column means
select(fy17:fy19) %>%
colMeans(na.rm = TRUE) %>%
# Clean up the output
data.frame() %>%
rename(`mean(amt)` = names(.)[1])
stats <- revenue %>%
na_if(0) %>%
summarise(
fy17sd = fy17 %>% unlist() %>% sd(na.rm = TRUE)
, fy18sd = fy18 %>% unlist() %>% sd(na.rm = TRUE)
, fy19sd = fy19 %>% unlist() %>% sd(na.rm = TRUE)
, fy17 = fy17 %>% unlist() %>% mean(na.rm = TRUE)
, fy18 = fy18 %>% unlist() %>% mean(na.rm = TRUE)
, fy19 = fy19 %>% unlist() %>% mean(na.rm = TRUE)
)
print(stats)
cbind(
stats %>% select(fy17:fy19) %>% t()
, stats %>% select(fy17sd:fy19sd) %>% t()
) %>%
data.frame() %>%
rename_(
`mean(amt)` = names(.)[1]
, `sd(amt)` = names(.)[2]
)
reshaped <- revenue %>%
# Create new year and amt fields for the existing columns
gather('year', 'amt', fy17:fy19) %>%
# Filter out the 0 amount years at this stage to avoid having to na_if() later
filter(amt > 0) %>%
# we could even make the year column numeric (quickest way is convert appearances of fy into 20)
mutate(
year = year %>% str_replace(pattern = 'fy', replacement = '20') %>% as.numeric()
)
print(reshaped)
reshaped %>%
group_by(year) %>%
summarise(
mean(amt)
, sd(amt)
, `sem(amt)` = sd(amt) / sqrt(length(amt))
)
library(tidyverse)
revenue <- data.frame(
client = c('A', 'B', 'C')
, fy17 = c(100, 400, 250)
, fy18 = c(200, 0, 250)
, fy19 = c(300, 500, 250)
)
print(revenue)
revenue %>%
# Calculate column means
select(fy17:fy19) %>%
colMeans() %>%
# Clean up the output
data.frame() %>%
rename(`mean(amt)` = names(.)[1])
revenue %>%
# Replace 0 with NA
na_if(0) %>%
# Calculate column means
select(fy17:fy19) %>%
colMeans(na.rm = TRUE) %>%
# Clean up the output
data.frame() %>%
rename(`mean(amt)` = names(.)[1])
stats <- revenue %>%
na_if(0) %>%
summarise(
fy17sd = fy17 %>% unlist() %>% sd(na.rm = TRUE)
, fy18sd = fy18 %>% unlist() %>% sd(na.rm = TRUE)
, fy19sd = fy19 %>% unlist() %>% sd(na.rm = TRUE)
, fy17 = fy17 %>% unlist() %>% mean(na.rm = TRUE)
, fy18 = fy18 %>% unlist() %>% mean(na.rm = TRUE)
, fy19 = fy19 %>% unlist() %>% mean(na.rm = TRUE)
)
print(stats)
cbind(
stats %>% select(fy17:fy19) %>% t()
, stats %>% select(fy17sd:fy19sd) %>% t()
) %>%
data.frame() %>%
rename_(
`mean(amt)` = names(.)[1]
, `sd(amt)` = names(.)[2]
)
reshaped <- revenue %>%
# Create new year and amt fields for the existing columns
gather('year', 'amt', fy17:fy19) %>%
# Filter out the 0 amount years at this stage to avoid having to na_if() later
filter(amt > 0) %>%
# we could even make the year column numeric (quickest way is convert appearances of fy into 20)
mutate(
year = year %>% str_replace(pattern = 'fy', replacement = '20') %>% as.numeric()
)
print(reshaped)
reshaped %>%
group_by(year) %>%
summarise(
mean(amt)
, sd(amt)
, `sem(amt)` = sd(amt) / sqrt(length(amt))
)
cbind(
stats %>% select(fy17:fy19) %>% t()
, stats %>% select(fy17sd:fy19sd) %>% t()
) %>%
data.frame() %>%
rename(
`mean(amt)` = names(.)[1]
, `sd(amt)` = names(.)[2]
)
library(tidyverse)
revenue <- data.frame(
client = c('A', 'B', 'C')
, fy17 = c(100, 400, 250)
, fy18 = c(200, 0, 250)
, fy19 = c(300, 500, 250)
)
print(revenue)
revenue %>%
# Calculate column means
select(fy17:fy19) %>%
colMeans() %>%
# Clean up the output
data.frame() %>%
rename(`mean(amt)` = names(.)[1])
revenue %>%
# Replace 0 with NA
na_if(0) %>%
# Calculate column means
select(fy17:fy19) %>%
colMeans(na.rm = TRUE) %>%
# Clean up the output
data.frame() %>%
rename(`mean(amt)` = names(.)[1])
stats <- revenue %>%
na_if(0) %>%
summarise(
fy17sd = fy17 %>% unlist() %>% sd(na.rm = TRUE)
, fy18sd = fy18 %>% unlist() %>% sd(na.rm = TRUE)
, fy19sd = fy19 %>% unlist() %>% sd(na.rm = TRUE)
, fy17 = fy17 %>% unlist() %>% mean(na.rm = TRUE)
, fy18 = fy18 %>% unlist() %>% mean(na.rm = TRUE)
, fy19 = fy19 %>% unlist() %>% mean(na.rm = TRUE)
)
print(stats)
cbind(
stats %>% select(fy17:fy19) %>% t()
, stats %>% select(fy17sd:fy19sd) %>% t()
) %>%
data.frame() %>%
rename(
`mean(amt)` = names(.)[1]
, `sd(amt)` = names(.)[2]
)
reshaped <- revenue %>%
# Create new year and amt fields for the existing columns
gather('year', 'amt', fy17:fy19) %>%
# Filter out the 0 amount years at this stage to avoid having to na_if() later
filter(amt > 0) %>%
# we could even make the year column numeric (quickest way is convert appearances of fy into 20)
mutate(
year = year %>% str_replace(pattern = 'fy', replacement = '20') %>% as.numeric()
)
print(reshaped)
reshaped %>%
group_by(year) %>%
summarise(
mean(amt)
, sd(amt)
, `sem(amt)` = sd(amt) / sqrt(length(amt))
)
library(tidyverse)
tmp <- revenue %>%
na_if(0) %>%
select(fy17:fy19)
tmp
tmp %>% colMeans()
tmp %>% apply(MARGIN = 2, FUN = sd)
tmp %>% apply(MARGIN = 2, FUN = function(x) {sd(x, na.rm = TRUE)})
cbind(
# Calculate column means
tmp %>%
colMeans(na.rm = TRUE)
, tmp %>%
apply(MARGIN = 2, FUN = function(x) {sd(x, na.rm = TRUE)})
)
tmp <- revenue %>%
na_if(0) %>%
select(fy17:fy19)
cbind(
# Calculate column means
tmp %>%
colMeans(na.rm = TRUE)
# Calculate column standard deviations
, tmp %>%
apply(MARGIN = 2, FUN = function(x) {sd(x, na.rm = TRUE)})
) %>%
# Clean up the output
data.frame() %>%
rename(
`mean(amt)` = names(.)[1]
, `sd(amt)` = names(.)[2]
)
library(tidyverse)
revenue <- data.frame(
client = c('A', 'B', 'C')
, fy17 = c(100, 400, 250)
, fy18 = c(200, 0, 250)
, fy19 = c(300, 500, 250)
)
print(revenue)
revenue %>%
# Calculate column means
select(fy17:fy19) %>%
colMeans() %>%
# Clean up the output
data.frame() %>%
rename(`mean(amt)` = names(.)[1])
revenue %>%
# Replace 0 with NA
na_if(0) %>%
# Calculate column means
select(fy17:fy19) %>%
colMeans(na.rm = TRUE) %>%
# Clean up the output
data.frame() %>%
rename(`mean(amt)` = names(.)[1])
cbind(
# Calculate column means
revenue %>%
na_if(0) %>%
select(fy17:fy19) %>%
colMeans(na.rm = TRUE)
# Calculate column standard deviations
, revenue %>%
na_if(0) %>%
select(fy17:fy19) %>%
apply(MARGIN = 2, FUN = function(x) {sd(x, na.rm = TRUE)})
) %>%
# Clean up the output
data.frame() %>%
rename(
`mean(amt)` = names(.)[1]
, `sd(amt)` = names(.)[2]
)
reshaped <- revenue %>%
# Create new year and amt fields for the existing columns
gather('year', 'amt', fy17:fy19) %>%
# Filter out the 0 amount years at this stage to avoid having to na_if() later
filter(amt > 0) %>%
# we could even make the year column numeric (quickest way is convert appearances of fy into 20)
mutate(
year = year %>% str_replace(pattern = 'fy', replacement = '20') %>% as.numeric()
)
print(reshaped)
reshaped %>%
group_by(year) %>%
summarise(
mean(amt)
, sd(amt)
, `sem(amt)` = sd(amt) / sqrt(length(amt))
)
library(tidyverse)
revenue <- data.frame(
client = c('A', 'B', 'C')
, fy17 = c(100, 400, 250)
, fy18 = c(200, 0, 250)
, fy19 = c(300, 500, 250)
)
print(revenue)
revenue %>%
# Calculate column means
select(fy17:fy19) %>%
colMeans() %>%
# Clean up the output
data.frame() %>%
rename(`mean(amt)` = names(.)[1])
revenue %>%
# Replace 0 with NA
na_if(0) %>%
# Calculate column means
select(fy17:fy19) %>%
colMeans(na.rm = TRUE) %>%
# Clean up the output
data.frame() %>%
rename(`mean(amt)` = names(.)[1])
cbind(
# Calculate column means
revenue %>%
na_if(0) %>%
select(fy17:fy19) %>%
colMeans(na.rm = TRUE)
# Calculate column standard deviations
, revenue %>%
na_if(0) %>%
select(fy17:fy19) %>%
apply(
MARGIN = 2
, FUN = function(x) {
sd(x, na.rm = TRUE)
}
)
) %>%
# Clean up the output
data.frame() %>%
rename(
`mean(amt)` = names(.)[1]
, `sd(amt)` = names(.)[2]
)
reshaped <- revenue %>%
# Create new year and amt fields for the existing columns
gather('year', 'amt', fy17:fy19) %>%
# Filter out the 0 amount years at this stage to avoid having to na_if() later
filter(amt > 0) %>%
# we could even make the year column numeric (quickest way is convert appearances of fy into 20)
mutate(
year = year %>%
str_replace(pattern = 'fy', replacement = '20') %>%
as.numeric()
)
print(reshaped)
reshaped %>%
group_by(year) %>%
summarise(
mean(amt)
, sd(amt)
, `sem(amt)` = sd(amt) / sqrt(length(amt))
)
library(tidyverse)
revenue <- data.frame(
client = c('A', 'B', 'C')
, fy17 = c(100, 400, 250)
, fy18 = c(200, 0, 250)
, fy19 = c(300, 500, 250)
)
print(revenue)
revenue %>%
# Calculate column means
select(fy17:fy19) %>%
colMeans() %>%
# Clean up the output
data.frame() %>%
rename(`mean(amt)` = names(.)[1])
revenue %>%
# Replace 0 with NA
na_if(0) %>%
# Calculate column means
select(fy17:fy19) %>%
colMeans(na.rm = TRUE) %>%
# Clean up the output
data.frame() %>%
rename(`mean(amt)` = names(.)[1])
cbind(
# Calculate column means
revenue %>%
na_if(0) %>%
select(fy17:fy19) %>%
colMeans(na.rm = TRUE)
# Calculate column standard deviations
, revenue %>%
na_if(0) %>%
select(fy17:fy19) %>%
apply(
MARGIN = 2
, FUN = function(x) {
sd(x, na.rm = TRUE)
}
)
) %>%
# Clean up the output
data.frame() %>%
rename(
`mean(amt)` = names(.)[1]
, `sd(amt)` = names(.)[2]
)
reshaped <- revenue %>%
# Create new year and amt fields for the existing columns
gather('year', 'amt', fy17:fy19) %>%
# Filter out the 0 amount years at this stage to avoid having to na_if() later
filter(amt > 0) %>%
# we could even make the year column numeric (quickest way is convert appearances of fy into 20)
mutate(
year = year %>%
str_replace(pattern = 'fy', replacement = '20') %>%
as.numeric()
)
print(reshaped)
reshaped %>%
# Aggregate within year
group_by(year) %>%
# Now we can enter in whatever summary statistics we want with just a single line of code
summarise(
mean(amt)
, sd(amt)
, `sem(amt)` = sd(amt) / sqrt(length(amt))
)
?apply
cbind(
# Calculate column means
revenue %>%
na_if(0) %>%
select(fy17:fy19) %>%
colMeans(na.rm = TRUE)
# Calculate column standard deviations
, revenue %>%
na_if(0) %>%
select(fy17:fy19) %>%
apply(
MARGIN = 2
, FUN = sd
, na.rm = TRUE
)
) %>%
# Clean up the output
data.frame() %>%
rename(
`mean(amt)` = names(.)[1]
, `sd(amt)` = names(.)[2]
)
library(tidyverse)
revenue <- data.frame(
client = c('A', 'B', 'C')
, fy17 = c(100, 400, 250)
, fy18 = c(200, 0, 250)
, fy19 = c(300, 500, 250)
)
print(revenue)
revenue %>%
# Calculate column means
select(fy17:fy19) %>%
colMeans() %>%
# Clean up the output
data.frame() %>%
rename(`mean(amt)` = names(.)[1])
revenue %>%
# Replace 0 with NA
na_if(0) %>%
# Calculate column means
select(fy17:fy19) %>%
colMeans(na.rm = TRUE) %>%
# Clean up the output
data.frame() %>%
rename(`mean(amt)` = names(.)[1])
cbind(
# Calculate column means
revenue %>%
na_if(0) %>%
select(fy17:fy19) %>%
colMeans(na.rm = TRUE)
# Calculate column standard deviations
, revenue %>%
na_if(0) %>%
select(fy17:fy19) %>%
apply(
MARGIN = 2
, FUN = sd
, na.rm = TRUE
)
) %>%
# Clean up the output
data.frame() %>%
rename(
`mean(amt)` = names(.)[1]
, `sd(amt)` = names(.)[2]
)
reshaped <- revenue %>%
# Create new year and amt fields for the existing columns
gather('year', 'amt', fy17:fy19) %>%
# Filter out the 0 amount years at this stage to avoid having to na_if() later
filter(amt > 0) %>%
# we could even make the year column numeric (quickest way is convert appearances of fy into 20)
mutate(
year = year %>%
str_replace(pattern = 'fy', replacement = '20') %>%
as.numeric()
)
print(reshaped)
reshaped %>%
# Aggregate within year
group_by(year) %>%
# Now we can enter in whatever summary statistics we want with just a single line of code
summarise(
mean(amt)
, sd(amt)
, `sem(amt)` = sd(amt) / sqrt(length(amt))
)
